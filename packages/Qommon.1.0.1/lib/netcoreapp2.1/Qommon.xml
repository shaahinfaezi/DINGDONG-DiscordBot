<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qommon</name>
    </assembly>
    <members>
        <member name="T:Qommon.Collections.ReadOnlyConcurrentDictionary`2">
            <summary>
                Represents a read-only wrapper for the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> collection.
            </summary>
            <typeparam name="TKey"> The <see cref="T:System.Type"/> of the keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The <see cref="T:System.Type"/> of the values in the dictionary. </typeparam>
        </member>
        <member name="P:Qommon.Collections.ReadOnlyConcurrentDictionary`2.Keys">
            <summary>
                Gets the keys collection of the underlying <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Qommon.Collections.ReadOnlyConcurrentDictionary`2.Values">
            <summary>
                Gets the keys collection of the underlying <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Qommon.Collections.ReadOnlyConcurrentDictionary`2.Count">
            <summary>
                Gets the number of key/value pairs in the underlying <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Qommon.Collections.ReadOnlyConcurrentDictionary`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})" -->
        <!-- Badly formed XML comment ignored for member "P:Qommon.Collections.ReadOnlyConcurrentDictionary`2.Item(`0)" -->
        <member name="M:Qommon.Collections.ReadOnlyConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
                Determines whether the underlying <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> contains the specified key.
            </summary>
            <param name="key"> The key to check for. </param>
        </member>
        <member name="M:Qommon.Collections.ReadOnlyConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
                Attempts to get the value associated with the specified key from the underlying <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="key"> The key of the value to get. </param>
            <param name="value"> The <see langword="out"/> value associated with the specified key. </param>
        </member>
        <member name="M:Qommon.Collections.ReadOnlyConcurrentDictionary`2.ToArray">
            <summary>
                Copies the key/value pairs from the underlying <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> to a new array.
            </summary>
        </member>
        <member name="M:Qommon.Collections.ReadOnlyConcurrentDictionary`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the underlying <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Qommon.Collections.ReadOnlySet`1.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:Qommon.Collections.ReadOnlySet`1"/>.
            </summary>
        </member>
        <member name="T:Qommon.Events.AsynchronousEventHandler`1">
            <summary>
                Represents an asynchronous event handler used by the <see cref="T:Qommon.Events.AsynchronousEvent`1"/>.
            </summary>
            <typeparam name="T"> The <see cref="T:System.Type"/> of <see cref="T:System.EventArgs"/> used by this handler. </typeparam>
            <param name="e"> The <see cref="T:System.EventArgs"/> object containing the event data. </param>
        </member>
        <member name="T:Qommon.Events.AsynchronousEvent`1">
            <summary>
                Represents an asynchronous event handler caller.
            </summary>
            <typeparam name="T"> The <see cref="T:System.Type"/> of <see cref="T:System.EventArgs"/> used by this event. </typeparam>
        </member>
        <member name="M:Qommon.Events.AsynchronousEvent`1.#ctor">
            <summary>
                Initialises a new <see cref="T:Qommon.Events.AsynchronousEvent`1"/>.
            </summary>
        </member>
        <member name="M:Qommon.Events.AsynchronousEvent`1.#ctor(System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
                Initialises a new <see cref="T:Qommon.Events.AsynchronousEvent`1"/> with the specified <see cref="T:System.Func`2"/> error handler.
            </summary>
            <param name="errorHandler"> The error handler for exceptions occurring in event handlers. </param>
        </member>
        <member name="M:Qommon.Events.AsynchronousEvent`1.Hook(Qommon.Events.AsynchronousEventHandler{`0})">
            <summary>
                Hooks an <see cref="T:Qommon.Events.AsynchronousEventHandler`1"/> up to this <see cref="T:Qommon.Events.AsynchronousEvent`1"/>.
            </summary>
            <param name="handler"> The <see cref="T:Qommon.Events.AsynchronousEventHandler`1"/> to hook up. </param>
        </member>
        <member name="M:Qommon.Events.AsynchronousEvent`1.Unhook(Qommon.Events.AsynchronousEventHandler{`0})">
            <summary>
                Unhooks an <see cref="T:Qommon.Events.AsynchronousEventHandler`1"/> from this <see cref="T:Qommon.Events.AsynchronousEvent`1"/>.
            </summary>
            <param name="handler"> The <see cref="T:Qommon.Events.AsynchronousEventHandler`1"/> to unhook. </param>
        </member>
        <member name="M:Qommon.Events.AsynchronousEvent`1.UnhookAll">
            <summary>
                Unhooks all <see cref="T:Qommon.Events.AsynchronousEventHandler`1"/>s from this <see cref="T:Qommon.Events.AsynchronousEvent`1"/>.
            </summary>
        </member>
        <member name="M:Qommon.Events.AsynchronousEvent`1.InvokeAsync(`0)">
            <summary>
                Invokes this <see cref="T:Qommon.Events.AsynchronousEventHandler`1"/>, sequentially invoking each hooked up <see cref="T:Qommon.Events.AsynchronousEventHandler`1"/>.
            </summary>
            <param name="e"> The <see cref="T:System.EventArgs"/> data for this invocation. </param>
        </member>
    </members>
</doc>
